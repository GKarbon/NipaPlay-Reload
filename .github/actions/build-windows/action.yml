name: 'Build Windows Package'
description: '构建 Windows 应用并生成 ZIP 和安装程序'
inputs:
  app-version:
    description: '应用版本号'
    required: true
outputs:
  zip-path:
    description: '生成的 ZIP 文件路径'
    value: ${{ steps.build.outputs.zip_path }}
  installer-path:
    description: '生成的安装程序路径'
    value: ${{ steps.installer.outputs.installer_path }}
runs:
  using: 'composite'
  steps:
    - name: Setup Chinese Font for Windows
      shell: pwsh
      run: |
        Write-Host "Setting up Chinese font for Windows build..."
        cd windows
        if (Test-Path "setup_font.bat") {
          Write-Host "Executing setup_font.bat..."
          cmd /c "setup_font.bat"
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Warning: Font setup failed with exit code $LASTEXITCODE"
          } else {
            Write-Host "Font setup completed successfully"
          }
        } else {
          Write-Host "Warning: setup_font.bat not found, skipping font setup"
        }
        cd ..
    
    - name: Build Web and copy assets
      shell: bash
      run: |
        chmod +x build_and_copy_web.sh
        ./build_and_copy_web.sh
    
    - name: Build Windows
      id: build
      shell: pwsh
      run: |
        flutter build windows --release
        $arch = "x64"
        $version = "${{ inputs.app-version }}"
        $DestDir = "build\windows\NipaPlay_${version}_Windows_x64"
        $SrcDir = "build\windows\x64\runner\Release"
        New-Item -Path $DestDir -ItemType Directory -Force
        Copy-Item -Path "$SrcDir\*" -Destination $DestDir -Recurse -Force
        Copy-Item -Path "windows\*.dll" -Destination $DestDir -Force
        $zipPath = "build\windows\NipaPlay_${version}_Windows_x64.zip"
        Compress-Archive -Path $DestDir -DestinationPath $zipPath -Force
        echo "zip_path=$zipPath" >> $env:GITHUB_OUTPUT

    - name: Prepare Windows installer assets
      shell: pwsh
      run: |
        # Install ImageMagick for image processing
        choco install imagemagick -y
        
        $arch = "x64"
        $version = "${{ inputs.app-version }}"
        $BuildDir = "build\windows\x64\runner\Release"
        
        # Create installer assets directory
        New-Item -Path "installer_assets" -ItemType Directory -Force
        
        # Copy installer script and assets to build directory
        Copy-Item -Path "windows\nipaplay_installer.nsi" -Destination "$BuildDir\"
        Copy-Item -Path "installer_assets\*" -Destination "$BuildDir\" -Recurse -Force
        Copy-Item -Path "LICENSE" -Destination "$BuildDir\" -ErrorAction SilentlyContinue

    - name: Create Windows installer with NSIS
      id: installer
      shell: pwsh
      run: |
        # Force reinstall NSIS to ensure clean state
        choco install nsis --force --yes
        
        $arch = "x64"
        $version = "${{ inputs.app-version }}"
        $BuildDir = "build\windows\x64\runner\Release"
        
        # Read NSIS script with proper encoding
        $nsiContent = Get-Content "$BuildDir\nipaplay_installer.nsi" -Raw -Encoding UTF8
        
        # Ensure version is in 4-part format for NSIS (X.Y.Z.W)
        $versionParts = $version.Split('.')
        if ($versionParts.Length -eq 3) {
          $nsiVersion = "${version}.0"
        } elseif ($versionParts.Length -eq 4) {
          $nsiVersion = $version
        } else {
          $nsiVersion = "1.0.0.0"
        }
        Write-Host "Using version: $version, NSIS version: $nsiVersion"
        
        # Update version information with proper escaping
        $nsiContent = $nsiContent -replace 'VIProductVersion "1\.0\.0\.0"', "VIProductVersion `"${nsiVersion}`""
        $nsiContent = $nsiContent -replace 'VIAddVersionKey "FileVersion" "1\.0\.0\.0"', "VIAddVersionKey `"FileVersion`" `"${nsiVersion}`""
        $nsiContent = $nsiContent -replace 'VIAddVersionKey "ProductVersion" "1\.0\.0\.0"', "VIAddVersionKey `"ProductVersion`" `"${nsiVersion}`""
        
        # Update output filename
        $nsiContent = $nsiContent -replace 'OutFile "NipaPlay_Setup\.exe"', "OutFile `"NipaPlay_${version}_Windows_x64_Setup.exe`""
        
        # Write file with UTF8 BOM to ensure proper encoding for NSIS
        $utf8BOM = New-Object System.Text.UTF8Encoding $true
        [System.IO.File]::WriteAllText("$BuildDir\nipaplay_installer.nsi", $nsiContent, $utf8BOM)
        
        # Download FileAssociation plugin for NSIS with multiple fallback URLs
        $pluginUrls = @(
          "https://nsis.sourceforge.io/mediawiki/images/7/7f/FileAssociation.nsh",
          "https://raw.githubusercontent.com/NSIS-Dev/Documentation/master/Reference/FileAssociation.nsh",
          "https://raw.githubusercontent.com/nsis-dev/nsis/master/Contrib/FileAssociation/FileAssociation.nsh"
        )
        
        $pluginPath = "$BuildDir\FileAssociation.nsh"
        $downloadSuccess = $false
        
        foreach ($url in $pluginUrls) {
          try {
            Write-Host "Attempting to download FileAssociation.nsh from $url"
            Invoke-WebRequest -Uri $url -OutFile $pluginPath -UseBasicParsing -ErrorAction Stop
            if (Test-Path $pluginPath) {
              $content = Get-Content $pluginPath -Raw
              if ($content -match "FileAssociation") {
                $downloadSuccess = $true
                Write-Host "Successfully downloaded FileAssociation.nsh from $url"
                break
              }
            }
          } catch {
            Write-Host "Failed to download from $url"
            continue
          }
        }
        
        if (-not $downloadSuccess) {
          Write-Host "All download attempts failed, creating basic FileAssociation.nsh"
          $lines = @()
          $lines += "!ifndef FileAssociation_INCLUDED"
          $lines += "!define FileAssociation_INCLUDED"
          $lines += ""
          $lines += "!macro RegisterExtension executable extension description"
          $lines += "  WriteRegStr HKCR `".`${extension}`" `"`" `"`${description}`""
          $lines += "  WriteRegStr HKCR `"`${description}`" `"`" `"`${description}`""
          $lines += "  WriteRegStr HKCR `"`${description}\DefaultIcon`" `"`" `"`${executable},0`""
          $lines += "  WriteRegStr HKCR `"`${description}\shell`" `"`" `"open`""
          $lines += "  WriteRegStr HKCR `"`${description}\shell\open`" `"`" `"`""
          $lines += "  WriteRegStr HKCR `"`${description}\shell\open\command`" `"`" '`"`${executable}`" `"%1`"'"
          $lines += "!macroend"
          $lines += ""
          $lines += "!macro UnRegisterExtension extension description"
          $lines += "  DeleteRegKey HKCR `".`${extension}`""
          $lines += "  DeleteRegKey HKCR `"`${description}`""
          $lines += "!macroend"
          $lines += ""
          $lines += "!endif # !FileAssociation_INCLUDED"
          Set-Content -Path $pluginPath -Value ($lines -join "`r`n") -Encoding UTF8
        }
        
        # Ensure NSIS can find the plugin
        $nsisIncludeDir = "C:\\Program Files (x86)\NSIS\Include"
        if (-not (Test-Path $nsisIncludeDir)) {
          New-Item -ItemType Directory -Force -Path $nsisIncludeDir
        }
        Copy-Item $pluginPath $nsisIncludeDir -Force
        
        # Compile installer with NSIS
        Push-Location $BuildDir
        $nsisPath = "C:\\Program Files (x86)\NSIS\makensis.exe"
        if (!(Test-Path $nsisPath)) {
          throw "NSIS compiler not found at $nsisPath"
        }
        
        Write-Host "Compiling installer with NSIS..."
        & $nsisPath "/V4" "nipaplay_installer.nsi"
        $exitCode = $LASTEXITCODE
        Pop-Location
        
        if ($exitCode -ne 0) {
          throw "NSIS compilation failed with exit code $exitCode"
        }
        
        # Move and verify installer
        $installerName = "NipaPlay_${version}_Windows_x64_Setup.exe"
        $installerPath = "$BuildDir\$installerName"
        $finalPath = "build\windows\$installerName"
        
        if (!(Test-Path $installerPath)) {
          throw "Installer file was not created: $installerPath"
        }
        
        Move-Item $installerPath "build\windows\" -Force
        
        if (!(Test-Path $finalPath)) {
          throw "Failed to move installer to final location: $finalPath"
        }
        
        Write-Host "NSIS installer created successfully at: $finalPath"
        echo "installer_path=$finalPath" >> $env:GITHUB_OUTPUT

    - name: List Windows build artifacts
      shell: pwsh
      run: |
        Write-Host "=== Windows Build Artifacts ==="
        Get-ChildItem "build\windows\" -File | ForEach-Object {
          $sizeKB = [math]::Round($_.Length / 1KB, 2)
          Write-Host "$($_.Name) - ${sizeKB} KB"
        }

