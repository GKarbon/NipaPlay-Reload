name: Build & Release

# Trigger on push to master branch or with a tag
on:
  push:
    branches:
      - '**'
    tags:
      - '0.*'

# If previous workflow is still running, we push again, we will cancel the previous workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  Build:
    name: Build ${{ matrix.target }}
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    runs-on: ${{ matrix.os }}
    env:
      FLUTTER_VERSION: 3.29.3
      FVP_DEPS_URL: https://github.com/wang-bin/mdk-sdk/releases/latest/download/
      FVP_DEPS_LATEST: 1 # Set globally to force latest nightly for all platforms
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: Android
            os: ubuntu-latest
            artifact_name: release-Android
            artifact_path: build/app/outputs/apk/release/*.apk
          - target: Windows
            os: windows-latest
            artifact_name: release-Windows-x64
            artifact_path: build/windows/*
            arch: x64
          - target: Linux
            os: ubuntu-24.04
            arch: amd64
            artifact_name: release-Linux-amd64
            artifact_path: build/linux/
          - target: iOS
            os: macos-latest
            cache_pod_key: ios-pods
            cache_pod_path: ios/Pods
            cache_pod_restore_keys_hash_file: ios/Podfile.lock
            artifact_name: release-iOS
            artifact_path: build/**/*.ipa
          - target: macOS
            os: macos-latest
            cache_pod_key: macos-pods
            cache_pod_path: macos/Pods
            cache_pod_restore_keys_hash_file: macos/Podfile.lock
            artifact_name: release-macOS
            artifact_path: NipaPlay_*_macOS_Universal.dmg
    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      # Get app version
      - name: Get app version
        id: get_version
        run: |
          echo "::set-output name=version::$(grep '^version:' pubspec.yaml | cut -d ' ' -f 2)"
      
      # Setup Android keystore (for Android)
      - name: Setup Android keystore
        if: matrix.target == 'Android'
        run: |
          echo "${{ secrets.ENCODED_KEYSTORE }}" | base64 -di > android/app/upload-keystore.jks
          echo "${{ secrets.KEY_PROPERTIES }}" > android/key.properties
      
      # Setup Flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2.12.0
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
      
      # Cache CocoaPods (for iOS/macOS)
      - name: Cache Pod
        if: matrix.cache_pod_key != null
        uses: actions/cache@v4
        with:
          key: ${{ matrix.cache_pod_key }}
          path: ${{ matrix.cache_pod_path }}
          restore-keys: ${{ matrix.cache_pod_key }}-${{ hashFiles(matrix.cache_pod_restore_keys_hash_file) }}
      
      # Setup JDK for Android
      - name: Setup JDK 21 (Android)
        if: matrix.target == 'Android'
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '21'
          cache: gradle

      # Build Android
      - name: Build Android
        if: matrix.target == 'Android'
        run: |
          flutter build apk --release --split-per-abi
          cd build/app/outputs/apk/release
          mv app-arm64-v8a-release.apk NipaPlay-${{ steps.get_version.outputs.version }}-Android-arm64.apk
          mv app-armeabi-v7a-release.apk NipaPlay-${{ steps.get_version.outputs.version }}-Android-arm32.apk
          mv app-x86_64-release.apk NipaPlay-${{ steps.get_version.outputs.version }}-Android-x86_64.apk
      
      # Xcode build for iOS/macOS
      - name: Build Xcode (iOS/macOS)
        if: matrix.os == 'macos-latest'
        run: xcodebuild -resolvePackageDependencies -workspace ios/Runner.xcworkspace -scheme Runner -configuration Release
      
      # Flutter Pub Get
      - name: Flutter Pub Get
        shell: bash
        run: |
          # Only set core.longpaths on Windows (not supported on macOS/Linux)
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            git config --global core.longpaths true
          fi
          flutter pub get
      
      - name: Build Web and copy assets
        if: matrix.target == 'Windows' || matrix.target == 'Linux' || matrix.target == 'macOS'
        shell: bash
        run: |
          chmod +x build_and_copy_web.sh
          ./build_and_copy_web.sh
      
      # Build iOS .ipa
      - name: Build iOS
        if: matrix.target == 'iOS'
        run: |
          cd ios
          pod update
          cd ..
          flutter build ios --release --no-codesign
          sh thin-payload.sh build/ios/iphoneos/*.app
          cd build
          mkdir -p Payload
          mv ios/iphoneos/*.app Payload
          zip -9 NipaPlay_${{ steps.get_version.outputs.version }}_iOS_arm64.ipa -r Payload
      
      # macOS build steps restructured
      - name: Prepare macOS build environment
        if: matrix.target == 'macOS'
        run: |
          cd macos
          export LANG=zh_CN.UTF-8
          export LC_ALL=zh_CN.UTF-8
          mkdir -p ~/.cocoapods
          echo 'source "https://cdn.cocoapods.org/"' > ~/.cocoapods/config
          echo "Cleaning existing Pods and cache for a fresh mdk nightly..."
          rm -rf Pods Podfile.lock
          pod cache clean fvp || true # Clean fvp pod's cache, which handles mdk
          pod cache clean --all
          echo "Running pod install --repo-update (this will run fvp/apple_deps.sh to get mdk nightly)..."
          pod install --repo-update
          cd ..

      - name: Build macOS App
        if: matrix.target == 'macOS'
        run: |
          flutter build macos --release

      - name: Copy mdk.framework.dSYM to App Bundle (macOS)
        if: matrix.target == 'macOS'
        run: |
          echo "Attempting to copy mdk.framework.dSYM for symbolication..."
          # Based on previous logs, mdk artifacts (framework & dSYM) seem to be placed 
          # in macos/Pods/mdk/ by the apple_deps.sh script (run during 'pod install').
          # This script previously checked macos/Pods/fvp/mdk.framework.dSYM.
          MDK_ARTIFACTS_DIR="macos/Pods/mdk"
          DSYM_SOURCE_PATH="${MDK_ARTIFACTS_DIR}/mdk.framework.dSYM"
          
          APP_BUNDLE_NAME="NipaPlay.app" # Consistent with dmg.sh and Linux app name
          APP_BUNDLE_ROOT_DIR="build/macos/Build/Products/Release"
          TARGET_DSYM_DIR="${APP_BUNDLE_ROOT_DIR}/${APP_BUNDLE_NAME}/Contents/Frameworks"

          if [ -d "$DSYM_SOURCE_PATH" ]; then
            echo "Found mdk.framework.dSYM at $DSYM_SOURCE_PATH"
            
            if [ ! -d "${APP_BUNDLE_ROOT_DIR}/${APP_BUNDLE_NAME}" ]; then
              echo "Error: App bundle ${APP_BUNDLE_ROOT_DIR}/${APP_BUNDLE_NAME} not found after flutter build."
              echo "Listing contents of ${APP_BUNDLE_ROOT_DIR}/:"
              ls -la "${APP_BUNDLE_ROOT_DIR}/"
              exit 1
            fi
            
            if [ ! -d "$TARGET_DSYM_DIR" ]; then
               echo "Warning: Target Frameworks directory $TARGET_DSYM_DIR does not exist. Will attempt to create it."
               mkdir -p "$TARGET_DSYM_DIR"
            fi

            echo "Copying $DSYM_SOURCE_PATH to $TARGET_DSYM_DIR/"
            cp -R "$DSYM_SOURCE_PATH" "$TARGET_DSYM_DIR/"
            if [ $? -eq 0 ]; then
              echo "Successfully copied mdk.framework.dSYM from $DSYM_SOURCE_PATH."
              echo "Contents of $TARGET_DSYM_DIR after copy:"
              ls -la "$TARGET_DSYM_DIR"
            else
              echo "Error: Failed to copy mdk.framework.dSYM from $DSYM_SOURCE_PATH."
              exit 1 # Fail the build if dSYM is found but cannot be copied
            fi
          else
            echo "Warning: mdk.framework.dSYM not found at the revised expected path $DSYM_SOURCE_PATH."
            echo "This script previously checked macos/Pods/fvp/mdk.framework.dSYM."
            echo "Listing contents of macos/Pods/ (if it exists):"
            ls -la "macos/Pods/" || echo "macos/Pods/ directory does not exist."
            echo "Listing contents of ${MDK_ARTIFACTS_DIR}/ (if it exists, this is where dSYM was expected):"
            ls -la "${MDK_ARTIFACTS_DIR}/" || echo "${MDK_ARTIFACTS_DIR}/ directory does not exist or is not accessible."
            echo "Symbolicated crash logs for mdk might not be available."
            # This is a warning, build continues.
          fi

      - name: Package macOS .dmg
        if: matrix.target == 'macOS'
        run: |
          brew install create-dmg imagemagick
          chmod +x dmg.sh
          
          # Set up environment for GUI operations in CI
          export DISPLAY=:99
          
          # Try to create DMG with timeout and retry mechanism
          timeout 300 ./dmg.sh || {
            echo "DMG creation timed out or failed, trying fallback approach with layout..."
            
            # Fallback: Create DMG with layout but without complex AppleScript operations
            version=$(head -n 19 pubspec.yaml | tail -n 1 | cut -d ' ' -f 2)
            dmg_name="NipaPlay_${version}_macOS_Universal.dmg"
            
            # Create a temporary directory for the DMG layout
            temp_dir=$(mktemp -d)
            mkdir -p "${temp_dir}/.background"
            
            # Copy the app to the temporary directory
            cp -R "build/macos/Build/Products/Release/NipaPlay.app" "${temp_dir}/"
            
            # Create a symbolic link to Applications
            ln -s /Applications "${temp_dir}/Applications"
            
            # Create the background image with arrow (fallback version)
            convert -size 800x450 xc:white \
              -font Arial-Bold -pointsize 120 -fill '#666666' \
              -gravity center \
              -draw "text -150,0 'NipaPlay'" \
              -draw "text 150,0 '>'" \
              "${temp_dir}/.background/background.png" || {
                # If ImageMagick fails, create simple background
                convert -size 800x450 xc:'#f0f0f0' "${temp_dir}/.background/background.png"
              }
            
            # Create DMG with layout (CI-friendly version)
            create-dmg \
              --volname "NipaPlay-${version}" \
              --window-pos 200 120 \
              --window-size 800 450 \
              --icon-size 100 \
              --icon "NipaPlay.app" 200 185 \
              --icon "Applications" 600 185 \
              --background "${temp_dir}/.background/background.png" \
              --no-internet-enable \
              --skip-jenkins \
              "${dmg_name}" \
              "${temp_dir}" || {
                # Final fallback: simple DMG without background
                echo "Fallback with layout failed, creating simple DMG..."
                rm -f "${dmg_name}"
                create-dmg \
                  --volname "NipaPlay-${version}" \
                  --window-size 800 450 \
                  --icon-size 100 \
                  --app-drop-link 600 185 \
              --no-internet-enable \
              --skip-jenkins \
              "${dmg_name}" \
              "build/macos/Build/Products/Release/NipaPlay.app"
              }
            
            # Clean up
            rm -rf "${temp_dir}"
          }
          
          echo "Listing final DMG:"
          ls -la *.dmg
      
      # Build Windows .zip and installer
      - name: Build Windows
        if: matrix.target == 'Windows'
        shell: pwsh
        run: |
          flutter build windows --release
          $arch = "x64"
          $version = "${{ steps.get_version.outputs.version }}"
          $DestDir = "build\\windows\\NipaPlay_${version}_Windows_x64"
          $SrcDir = "build\\windows\\x64\\runner\\Release"
          New-Item -Path $DestDir -ItemType Directory -Force
          Copy-Item -Path "$SrcDir\\*" -Destination $DestDir -Recurse -Force
          Copy-Item -Path "windows\\*.dll" -Destination $DestDir -Force
          Compress-Archive -Path $DestDir -DestinationPath "build\\windows\\NipaPlay_${version}_Windows_x64.zip" -Force

      # Prepare installer assets for Windows
      - name: Prepare Windows installer assets
        if: matrix.target == 'Windows'
        shell: pwsh
        run: |
          # Install ImageMagick for image processing
          choco install imagemagick -y
          
          $arch = "x64"
          $version = "${{ steps.get_version.outputs.version }}"
          $BuildDir = "build\\windows\\x64\\runner\\Release"
          
          # Create installer assets directory
          New-Item -Path "installer_assets" -ItemType Directory -Force
          
          # Copy installer script and assets to build directory
          Copy-Item -Path "windows\\nipaplay_installer.nsi" -Destination "$BuildDir\\"
          Copy-Item -Path "installer_assets\\*" -Destination "$BuildDir\\" -Recurse -Force
          Copy-Item -Path "LICENSE" -Destination "$BuildDir\\" -ErrorAction SilentlyContinue

      # Create Windows installer with NSIS
      - name: Create Windows installer with NSIS
        if: matrix.target == 'Windows'
        shell: pwsh
        run: |
          # Force reinstall NSIS to ensure clean state
          choco install nsis --force --yes
          
          $arch = "x64"
          $version = "${{ steps.get_version.outputs.version }}"
          $BuildDir = "build\\windows\\x64\\runner\\Release"
          
          # Read NSIS script with proper encoding
          $nsiContent = Get-Content "$BuildDir\\nipaplay_installer.nsi" -Raw -Encoding UTF8
          
          # Ensure version is in 4-part format for NSIS (X.Y.Z.W)
          $versionParts = $version.Split('.')
          if ($versionParts.Length -eq 3) {
            $nsiVersion = "${version}.0"
          } elseif ($versionParts.Length -eq 4) {
            $nsiVersion = $version
          } else {
            $nsiVersion = "1.0.0.0"
          }
          Write-Host "Using version: $version, NSIS version: $nsiVersion"
          
          # Update version information with proper escaping
          $nsiContent = $nsiContent -replace 'VIProductVersion "1\.0\.0\.0"', "VIProductVersion `"${nsiVersion}`""
          $nsiContent = $nsiContent -replace 'VIAddVersionKey "FileVersion" "1\.0\.0\.0"', "VIAddVersionKey `"FileVersion`" `"${nsiVersion}`""
          $nsiContent = $nsiContent -replace 'VIAddVersionKey "ProductVersion" "1\.0\.0\.0"', "VIAddVersionKey `"ProductVersion`" `"${nsiVersion}`""
          
          # Update output filename
          $nsiContent = $nsiContent -replace 'OutFile "NipaPlay_Setup\.exe"', "OutFile `"NipaPlay_${version}_Windows_x64_Setup.exe`""
          
          # Write file with UTF8 BOM to ensure proper encoding for NSIS
          $utf8BOM = New-Object System.Text.UTF8Encoding $true
          [System.IO.File]::WriteAllText("$BuildDir\\nipaplay_installer.nsi", $nsiContent, $utf8BOM)
          
          # Download FileAssociation plugin for NSIS with multiple fallback URLs
          $pluginUrls = @(
            "https://nsis.sourceforge.io/mediawiki/images/7/7f/FileAssociation.nsh",
            "https://raw.githubusercontent.com/NSIS-Dev/Documentation/master/Reference/FileAssociation.nsh",
            "https://raw.githubusercontent.com/nsis-dev/nsis/master/Contrib/FileAssociation/FileAssociation.nsh"
          )
          
          $pluginPath = "$BuildDir\\FileAssociation.nsh"
          $downloadSuccess = $false
          
          foreach ($url in $pluginUrls) {
            try {
              Write-Host "Attempting to download FileAssociation.nsh from $url"
              Invoke-WebRequest -Uri $url -OutFile $pluginPath -UseBasicParsing -ErrorAction Stop
              if (Test-Path $pluginPath) {
                $content = Get-Content $pluginPath -Raw
                if ($content -match "FileAssociation") {
                  $downloadSuccess = $true
                  Write-Host "Successfully downloaded FileAssociation.nsh from $url"
                  break
                }
              }
            } catch {
              Write-Host "Failed to download from $url"
              continue
            }
          }
          
          if (-not $downloadSuccess) {
            Write-Host "All download attempts failed, creating basic FileAssociation.nsh"
            $lines = @()
            $lines += "!ifndef FileAssociation_INCLUDED"
            $lines += "!define FileAssociation_INCLUDED"
            $lines += ""
            $lines += "!macro RegisterExtension executable extension description"
            $lines += "  WriteRegStr HKCR `".`${extension}`" `"`" `"`${description}`""
            $lines += "  WriteRegStr HKCR `"`${description}`" `"`" `"`${description}`""
            $lines += "  WriteRegStr HKCR `"`${description}\DefaultIcon`" `"`" `"`${executable},0`""
            $lines += "  WriteRegStr HKCR `"`${description}\shell`" `"`" `"open`""
            $lines += "  WriteRegStr HKCR `"`${description}\shell\open`" `"`" `"`""
            $lines += "  WriteRegStr HKCR `"`${description}\shell\open\command`" `"`" '`"`${executable}`" `"%1`"'"
            $lines += "!macroend"
            $lines += ""
            $lines += "!macro UnRegisterExtension extension description"
            $lines += "  DeleteRegKey HKCR `".`${extension}`""
            $lines += "  DeleteRegKey HKCR `"`${description}`""
            $lines += "!macroend"
            $lines += ""
            $lines += "!endif # !FileAssociation_INCLUDED"
            Set-Content -Path $pluginPath -Value ($lines -join "`r`n") -Encoding UTF8
          }
          
          # Ensure NSIS can find the plugin
          $nsisIncludeDir = "C:\\Program Files (x86)\\NSIS\\Include"
          if (-not (Test-Path $nsisIncludeDir)) {
            New-Item -ItemType Directory -Force -Path $nsisIncludeDir
          }
          Copy-Item $pluginPath $nsisIncludeDir -Force
          
          # Compile installer with NSIS
          Push-Location $BuildDir
          $nsisPath = "C:\\Program Files (x86)\\NSIS\\makensis.exe"
          if (!(Test-Path $nsisPath)) {
            throw "NSIS compiler not found at $nsisPath"
          }
          
          Write-Host "Compiling installer with NSIS..."
          & $nsisPath "/V4" "nipaplay_installer.nsi"
          $exitCode = $LASTEXITCODE
          Pop-Location
          
          if ($exitCode -ne 0) {
            throw "NSIS compilation failed with exit code $exitCode"
          }
          
          # Move and verify installer
          $installerName = "NipaPlay_${version}_Windows_x64_Setup.exe"
          $installerPath = "$BuildDir\\$installerName"
          $finalPath = "build\\windows\\$installerName"
          
          if (!(Test-Path $installerPath)) {
            throw "Installer file was not created: $installerPath"
          }
          
          Move-Item $installerPath "build\\windows\\" -Force
          
          if (!(Test-Path $finalPath)) {
            throw "Failed to move installer to final location: $finalPath"
          }
          
          Write-Host "NSIS installer created successfully at: $finalPath"

      # List Windows build artifacts  
      - name: List Windows build artifacts
        if: matrix.target == 'Windows'
        shell: pwsh
        run: |
          Write-Host "=== Windows Build Artifacts ==="
          Get-ChildItem "build\\windows\\" -File | ForEach-Object {
            $sizeKB = [math]::Round($_.Length / 1KB, 2)
            Write-Host "$($_.Name) - ${sizeKB} KB"
          }
      
      # Build Linux .deb
      - name: Install Linux build dependencies
        if: matrix.target == 'Linux'
        run: |
          sudo apt-get update
          # Install core build dependencies
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev
          # Install mpv dependencies for media_kit (必需，即使系统没有也要安装用于构建)
          sudo apt-get install -y libmpv-dev mpv
          # Install mimalloc for better memory management
          sudo apt-get install -y libmimalloc-dev libmimalloc2.0
          # Install packaging tools
          sudo apt-get install -y fuse libfuse2 libqt5svg5 p7zip-full rpm desktop-file-utils
          # Install additional libs that might be needed
          sudo apt-get install -y libasound2-dev libass-dev libmpv-dev
          # Install keybinder-3.0 for hotkey_manager
          sudo apt-get install -y libkeybinder-3.0-dev

      - name: Build Linux
        if: matrix.target == 'Linux'
        run: |
          flutter build linux --release
      - name: Linux packaging and cleanup
        if: matrix.target == 'Linux'
        shell: /usr/bin/bash -e {0}
        run: |
          # Define variables
          APP_NAME="NipaPlay" # Change if your app name is different
          APP_NAME_LOWER="nipaplay" # Lowercase for paths/executable
          VERSION=$(grep '^version:' pubspec.yaml | cut -d ' ' -f 2)
          ARCH="amd64" # Assuming amd64 from matrix
          BUILD_OUTPUT_DIR="build/linux/x64/release/bundle"
          LINUX_BUILD_DIR="build/linux"
          DEB_PKG_NAME="${APP_NAME}-${VERSION}-Linux-${ARCH}"
          APPIMAGE_NAME="${APP_NAME}-${VERSION}-Linux-${ARCH}.AppImage"
          ARCHIVE_NAME="${APP_NAME}-${VERSION}-Linux-${ARCH}.tar.gz"
          DESKTOP_FILE_NAME="io.github.MCDFsteve.NipaPlay-Reload.desktop" # Match your actual desktop file name
          ICON_NAME="io.github.MCDFsteve.NipaPlay-Reload.png" # Match icon name used in desktop file if specific
          ICON_SOURCE_PATH="assets/images/logo512.png" # Corrected path relative to root
          ASSETS_LINUX_DIR="assets/linux" # Corrected path relative to root
          RPM_SPEC_TEMPLATE="${ASSETS_LINUX_DIR}/nipaplay.spec.template"
          RPM_SPEC_FILE="nipaplay.spec" # Will be placed in SPECS dir
          RPM_PKG_NAME="${APP_NAME}-${VERSION}-1.${ARCH}.rpm" # Adjust if Release tag in spec changes
          
          echo "--- Starting Packaging ---"
          echo "Version: ${VERSION}, Arch: ${ARCH}"
          echo "Build Output: ${BUILD_OUTPUT_DIR}"
          echo "Linux Build Dir: ${LINUX_BUILD_DIR}"
          
          # --- Create .deb package ---
          echo "--- Creating .deb package ---"
          DEB_ROOT="${LINUX_BUILD_DIR}/${DEB_PKG_NAME}"
          mkdir -p "${DEB_ROOT}/opt/${APP_NAME_LOWER}"
          mkdir -p "${DEB_ROOT}/usr/share/applications"
          mkdir -p "${DEB_ROOT}/usr/share/icons/hicolor/512x512/apps"
          mkdir -p "${DEB_ROOT}/DEBIAN"
          chmod 0755 "${DEB_ROOT}/DEBIAN"
          
          # Copy app files
          echo "Copying application files to ${DEB_ROOT}/opt/${APP_NAME_LOWER}/"
          cp -r "${BUILD_OUTPUT_DIR}/"* "${DEB_ROOT}/opt/${APP_NAME_LOWER}/"
          
          # Copy system libmpv libraries to ensure availability
          echo "Copying system libmpv libraries to ${DEB_ROOT}/opt/${APP_NAME_LOWER}/lib/"
          mkdir -p "${DEB_ROOT}/opt/${APP_NAME_LOWER}/lib"
          # Copy system libmpv and create compatibility symlinks
          find /usr/lib /usr/lib/x86_64-linux-gnu -name "libmpv*.so*" -type f 2>/dev/null | while read mpv_lib; do
            cp "$mpv_lib" "${DEB_ROOT}/opt/${APP_NAME_LOWER}/lib/" 2>/dev/null || true
          done
          # Create compatibility symlinks for libmpv.so.1 if needed
          cd "${DEB_ROOT}/opt/${APP_NAME_LOWER}/lib"
          if [ ! -f "libmpv.so.1" ] && [ -f "libmpv.so.2" ]; then
            ln -sf libmpv.so.2 libmpv.so.1
          fi
          cd - >/dev/null
          
          # Create DEBIAN/control from template
          echo "Creating DEBIAN/control"
          sed -e "s/VERSION_PLACEHOLDER/${VERSION}/g" \
              -e "s/ARCH_PLACEHOLDER/${ARCH}/g" \
              "${ASSETS_LINUX_DIR}/DEBIAN/control.template" > "${DEB_ROOT}/DEBIAN/control"
          
          # Copy postinst/postrm scripts if they exist
          if [ -f "${ASSETS_LINUX_DIR}/DEBIAN/postinst" ]; then
            echo "Copying postinst script"
            cp "${ASSETS_LINUX_DIR}/DEBIAN/postinst" "${DEB_ROOT}/DEBIAN/"
            chmod 0755 "${DEB_ROOT}/DEBIAN/postinst"
          fi
          if [ -f "${ASSETS_LINUX_DIR}/DEBIAN/postrm" ]; then
            echo "Copying postrm script"
            cp "${ASSETS_LINUX_DIR}/DEBIAN/postrm" "${DEB_ROOT}/DEBIAN/"
            chmod 0755 "${DEB_ROOT}/DEBIAN/postrm"
          fi
          
          # Copy desktop file and icon
          echo "Copying desktop file and icon"
          cp "${ASSETS_LINUX_DIR}/${DESKTOP_FILE_NAME}" "${DEB_ROOT}/usr/share/applications/"
          cp "${ICON_SOURCE_PATH}" "${DEB_ROOT}/usr/share/icons/hicolor/512x512/apps/${ICON_NAME}"
          
          # Build the .deb package
          echo "Building .deb package..."
          dpkg-deb --build --root-owner-group "${DEB_ROOT}" "${LINUX_BUILD_DIR}/${DEB_PKG_NAME}.deb"
          echo ".deb package created at ${LINUX_BUILD_DIR}/${DEB_PKG_NAME}.deb"
          
          # --- Create AppImage using linuxdeployqt ---
          echo "--- Creating AppImage ---"
          APPDIR="${LINUX_BUILD_DIR}/${APP_NAME}-AppDir"
          
          mkdir -p "${APPDIR}/lib"
          mkdir -p "${APPDIR}/data"
          
          # Copy main executable to AppDir root
          echo "Copying executable to AppDir root"
          cp "${BUILD_OUTPUT_DIR}/${APP_NAME}" "${APPDIR}/"
          
          # Copy contents of bundle/lib to AppDir/lib
          echo "Copying lib/* to AppDir/lib/"
          cp -r "${BUILD_OUTPUT_DIR}/lib/." "${APPDIR}/lib/"
          
          # Copy contents of bundle/data to AppDir/data
          echo "Copying data/* to AppDir/data/"
          cp -r "${BUILD_OUTPUT_DIR}/data/." "${APPDIR}/data/"
          
          # Copy system libmpv libraries to AppImage
          echo "Copying system libmpv libraries to AppImage"
          find /usr/lib /usr/lib/x86_64-linux-gnu -name "libmpv*.so*" -type f 2>/dev/null | while read mpv_lib; do
            cp "$mpv_lib" "${APPDIR}/lib/" 2>/dev/null || true
          done
          # Create compatibility symlinks for libmpv.so.1 if needed
          cd "${APPDIR}/lib"
          if [ ! -f "libmpv.so.1" ] && [ -f "libmpv.so.2" ]; then
            ln -sf libmpv.so.2 libmpv.so.1
          fi
          cd - >/dev/null
          
          # Copy desktop file and icon to AppDir root
          echo "Copying desktop file and icon to AppDir root"
          cp "${ASSETS_LINUX_DIR}/${DESKTOP_FILE_NAME}" "${APPDIR}/"
          cp "${ICON_SOURCE_PATH}" "${APPDIR}/${ICON_NAME}"
          
          # Download linuxdeployqt
          echo "Downloading linuxdeployqt..."
          wget -q https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage -O linuxdeployqt
          chmod +x linuxdeployqt
          
          # Run linuxdeployqt
          echo "Running linuxdeployqt..."
          export LD_LIBRARY_PATH="${APPDIR}/lib:${LD_LIBRARY_PATH}"
          chmod +x "${APPDIR}/${APP_NAME}"
          
          ./linuxdeployqt "${APPDIR}/${APP_NAME}" -unsupported-allow-new-glibc -appimage -bundle-non-qt-libs
          
          echo "Listing *.AppImage files in current directory after linuxdeployqt:"
          ls -la *.AppImage || echo "No AppImage found in current directory."
          
          # Find and rename the generated AppImage
          echo "Locating and renaming generated AppImage..."
          GENERATED_APPIMAGE=$(find . -maxdepth 1 -name "*.AppImage" -not -name "linuxdeployqt*.AppImage" -print -quit) 
          if [ -n "$GENERATED_APPIMAGE" ]; then
            echo "Found generated AppImage: $GENERATED_APPIMAGE"
            mv "$GENERATED_APPIMAGE" "${LINUX_BUILD_DIR}/${APPIMAGE_NAME}"
            echo "AppImage created at ${LINUX_BUILD_DIR}/${APPIMAGE_NAME}"
          else
            echo "AppImage generation failed or file not found by find command!"
          fi
          rm -f linuxdeployqt # Clean up downloaded tool
          
          # --- Create compressed binary archive (.tar.gz) ---
          echo "--- Creating .tar.gz archive ---"
          ARCHIVE_CONTENT_DIR="${LINUX_BUILD_DIR}/archive_content"
          mkdir -p "${ARCHIVE_CONTENT_DIR}"
          
          # Copy the essential runtime files from the build output
          echo "Copying application files to archive directory"
          cp -r "${BUILD_OUTPUT_DIR}/"* "${ARCHIVE_CONTENT_DIR}/"
          
          # Copy system libmpv libraries to tar.gz archive
          echo "Copying system libmpv libraries to tar.gz archive"
          mkdir -p "${ARCHIVE_CONTENT_DIR}/lib"
          find /usr/lib /usr/lib/x86_64-linux-gnu -name "libmpv*.so*" -type f 2>/dev/null | while read mpv_lib; do
            cp "$mpv_lib" "${ARCHIVE_CONTENT_DIR}/lib/" 2>/dev/null || true
          done
          # Create compatibility symlinks for libmpv.so.1 if needed
          cd "${ARCHIVE_CONTENT_DIR}/lib"
          if [ ! -f "libmpv.so.1" ] && [ -f "libmpv.so.2" ]; then
            ln -sf libmpv.so.2 libmpv.so.1
          fi
          cd - >/dev/null
          
          # Add a simple run script
          RUN_SCRIPT_PATH="${ARCHIVE_CONTENT_DIR}/run.sh"
          echo "Creating run.sh script at ${RUN_SCRIPT_PATH}"
          echo '#!/bin/sh' > "${RUN_SCRIPT_PATH}"
          echo '# Run script for NipaPlay binary archive' >> "${RUN_SCRIPT_PATH}"
          echo 'DIR="$(dirname "$(readlink -f "$0")")"' >> "${RUN_SCRIPT_PATH}"
          echo 'export LD_LIBRARY_PATH="$DIR/lib:$LD_LIBRARY_PATH"' >> "${RUN_SCRIPT_PATH}"
          echo 'export GTK_CSD=0' >> "${RUN_SCRIPT_PATH}"
          echo 'export GTK3_NOCSD=1' >> "${RUN_SCRIPT_PATH}"
          echo '' >> "${RUN_SCRIPT_PATH}"
          echo '# Check for libmpv (required by media_kit)' >> "${RUN_SCRIPT_PATH}"
          echo 'if ! ldconfig -p | grep -q libmpv; then' >> "${RUN_SCRIPT_PATH}"
          echo '  echo "警告: 系统未找到 libmpv 库"' >> "${RUN_SCRIPT_PATH}"
          echo '  echo "NipaPlay 需要 libmpv 支持视频播放"' >> "${RUN_SCRIPT_PATH}"
          echo '  echo "请安装: sudo apt install libmpv1 mpv (Ubuntu/Debian)"' >> "${RUN_SCRIPT_PATH}"
          echo '  echo "或者:   sudo dnf install mpv-libs mpv (Fedora)"' >> "${RUN_SCRIPT_PATH}"
          echo '  echo "或者:   sudo pacman -S mpv (Arch)"' >> "${RUN_SCRIPT_PATH}"
          echo '  echo ""' >> "${RUN_SCRIPT_PATH}"
          echo 'fi' >> "${RUN_SCRIPT_PATH}"
          echo '' >> "${RUN_SCRIPT_PATH}"
          echo '# Print library path for debugging' >> "${RUN_SCRIPT_PATH}"
          echo 'echo "LD_LIBRARY_PATH: $LD_LIBRARY_PATH"' >> "${RUN_SCRIPT_PATH}"
          echo '' >> "${RUN_SCRIPT_PATH}"
          echo '# Execute the main binary' >> "${RUN_SCRIPT_PATH}"
          echo "\"\$DIR/${APP_NAME}\" \"\$@\"" >> "${RUN_SCRIPT_PATH}"
          chmod +x "${RUN_SCRIPT_PATH}"
          
          # Add an install helper script
          INSTALL_SCRIPT_PATH="${ARCHIVE_CONTENT_DIR}/install-deps.sh"
          echo "Creating install-deps.sh script at ${INSTALL_SCRIPT_PATH}"
          echo '#!/bin/bash' > "${INSTALL_SCRIPT_PATH}"
          echo '# 依赖安装脚本 for NipaPlay' >> "${INSTALL_SCRIPT_PATH}"
          echo '' >> "${INSTALL_SCRIPT_PATH}"
          echo 'echo "NipaPlay 依赖安装助手"' >> "${INSTALL_SCRIPT_PATH}"
          echo 'echo "========================"' >> "${INSTALL_SCRIPT_PATH}"
          echo '' >> "${INSTALL_SCRIPT_PATH}"
          echo '# 检测发行版' >> "${INSTALL_SCRIPT_PATH}"
          echo 'if [ -f /etc/debian_version ]; then' >> "${INSTALL_SCRIPT_PATH}"
          echo '  echo "检测到 Debian/Ubuntu 系统"' >> "${INSTALL_SCRIPT_PATH}"
          echo '  sudo apt update' >> "${INSTALL_SCRIPT_PATH}"
          echo '  sudo apt install -y libmpv1 mpv libgtk-3-0 ffmpeg libass9' >> "${INSTALL_SCRIPT_PATH}"
          echo 'elif [ -f /etc/fedora-release ]; then' >> "${INSTALL_SCRIPT_PATH}"
          echo '  echo "检测到 Fedora 系统"' >> "${INSTALL_SCRIPT_PATH}"
          echo '  sudo dnf install -y mpv-libs mpv gtk3 ffmpeg libass' >> "${INSTALL_SCRIPT_PATH}"
          echo 'elif [ -f /etc/arch-release ]; then' >> "${INSTALL_SCRIPT_PATH}"
          echo '  echo "检测到 Arch Linux 系统"' >> "${INSTALL_SCRIPT_PATH}"
          echo '  sudo pacman -S --needed mpv gtk3 ffmpeg libass' >> "${INSTALL_SCRIPT_PATH}"
          echo 'else' >> "${INSTALL_SCRIPT_PATH}"
          echo '  echo "未识别的 Linux 发行版"' >> "${INSTALL_SCRIPT_PATH}"
          echo '  echo "请手动安装以下依赖:"' >> "${INSTALL_SCRIPT_PATH}"
          echo '- libmpv (mpv 媒体播放器库)' >> "${INSTALL_SCRIPT_PATH}"
          echo '- gtk3 (GUI 工具包)' >> "${INSTALL_SCRIPT_PATH}"
          echo '- ffmpeg (媒体处理)' >> "${INSTALL_SCRIPT_PATH}"
          echo '- libass (字幕渲染)' >> "${INSTALL_SCRIPT_PATH}"
          echo 'fi' >> "${INSTALL_SCRIPT_PATH}"
          echo '' >> "${INSTALL_SCRIPT_PATH}"
          echo 'echo "依赖安装完成！现在可以运行 ./run.sh 启动 NipaPlay"' >> "${INSTALL_SCRIPT_PATH}"
          chmod +x "${INSTALL_SCRIPT_PATH}"
          
          # Add README file
          README_PATH="${ARCHIVE_CONTENT_DIR}/README-Linux.md"
          echo "Creating README-Linux.md at ${README_PATH}"
          echo '# NipaPlay Linux 版本使用说明' > "${README_PATH}"
          echo '' >> "${README_PATH}"
          echo '## 快速开始' >> "${README_PATH}"
          echo '' >> "${README_PATH}"
          echo '1. **安装依赖**（首次使用必需）：' >> "${README_PATH}"
          echo '   ```bash' >> "${README_PATH}"
          echo '   ./install-deps.sh' >> "${README_PATH}"
          echo '   ```' >> "${README_PATH}"
          echo '' >> "${README_PATH}"
          echo '2. **运行程序**：' >> "${README_PATH}"
          echo '   ```bash' >> "${README_PATH}"
          echo '   ./run.sh' >> "${README_PATH}"
          echo '   ```' >> "${README_PATH}"
          echo '' >> "${README_PATH}"
          echo '## 依赖说明' >> "${README_PATH}"
          echo '' >> "${README_PATH}"
          echo 'NipaPlay 需要以下系统库才能正常运行：' >> "${README_PATH}"
          echo '' >> "${README_PATH}"
          echo '- **libmpv** - 核心视频播放支持（media_kit 需要）' >> "${README_PATH}"
          echo '- **gtk3** - 图形界面' >> "${README_PATH}"
          echo '- **ffmpeg** - 视频解码' >> "${README_PATH}"
          echo '- **libass** - 字幕渲染' >> "${README_PATH}"
          echo '' >> "${README_PATH}"
          echo '## 手动安装依赖' >> "${README_PATH}"
          echo '' >> "${README_PATH}"
          echo '### Ubuntu/Debian' >> "${README_PATH}"
          echo '```bash' >> "${README_PATH}"
          echo 'sudo apt update' >> "${README_PATH}"
          echo 'sudo apt install libmpv1 mpv libgtk-3-0 ffmpeg libass9' >> "${README_PATH}"
          echo '```' >> "${README_PATH}"
          echo '' >> "${README_PATH}"
          echo '### Fedora' >> "${README_PATH}"
          echo '```bash' >> "${README_PATH}"
          echo 'sudo dnf install mpv-libs mpv gtk3 ffmpeg libass' >> "${README_PATH}"
          echo '```' >> "${README_PATH}"
          echo '' >> "${README_PATH}"
          echo '### Arch Linux' >> "${README_PATH}"
          echo '```bash' >> "${README_PATH}"
          echo 'sudo pacman -S mpv gtk3 ffmpeg libass' >> "${README_PATH}"
          echo '```' >> "${README_PATH}"
          echo '' >> "${README_PATH}"
          echo '## 故障排除' >> "${README_PATH}"
          echo '' >> "${README_PATH}"
          echo '如果遇到 "Cannot find libmpv" 错误：' >> "${README_PATH}"
          echo '1. 确保已安装 libmpv：`ldconfig -p | grep libmpv`' >> "${README_PATH}"
          echo '2. 如果没有，运行 `./install-deps.sh` 或手动安装上述依赖' >> "${README_PATH}"
          echo '' >> "${README_PATH}"
          echo '如果遇到其他问题，请访问：' >> "${README_PATH}"
          echo 'https://github.com/MCDFsteve/NipaPlay-Reload/issues' >> "${README_PATH}"
          
          # Create the tarball
          echo "Creating tarball..."
          tar -czvf "${LINUX_BUILD_DIR}/${ARCHIVE_NAME}" -C "${ARCHIVE_CONTENT_DIR}" .
          echo ".tar.gz archive created at ${LINUX_BUILD_DIR}/${ARCHIVE_NAME}"
          
          # --- Create RPM package ---
          echo "--- Creating RPM package ---"
          RPM_BUILD_ROOT="${HOME}/rpmbuild"
          mkdir -p "${RPM_BUILD_ROOT}"/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
          
          # Prepare sources for RPM build
          mkdir -p "${RPM_BUILD_ROOT}/SOURCES/bundle"
          cp -r "${BUILD_OUTPUT_DIR}/." "${RPM_BUILD_ROOT}/SOURCES/bundle/"
          cp "${ASSETS_LINUX_DIR}/${DESKTOP_FILE_NAME}" "${RPM_BUILD_ROOT}/SOURCES/"
          cp "${ICON_SOURCE_PATH}" "${RPM_BUILD_ROOT}/SOURCES/logo512.png"
          
          # Prepare spec file
          echo "Preparing RPM spec file..."
          sed -e "s/VERSION_PLACEHOLDER/${VERSION}/g" \
              "${RPM_SPEC_TEMPLATE}" > "${RPM_BUILD_ROOT}/SPECS/${RPM_SPEC_FILE}"
          
          # Build RPM
          echo "Building RPM..."
          rpmbuild -ba "${RPM_BUILD_ROOT}/SPECS/${RPM_SPEC_FILE}" --define "_topdir ${RPM_BUILD_ROOT}" --define "_sourcedir ${RPM_BUILD_ROOT}/SOURCES" --nodeps
          
          # Move the generated RPM to the final artifact directory
          echo "Moving RPM package..."
          RPM_ARCH_DIR="x86_64"
          GENERATED_RPM_PATH=$(find "${RPM_BUILD_ROOT}/RPMS/${RPM_ARCH_DIR}/" -name "nipaplay-${VERSION}*.rpm" -print -quit)
          DESIRED_RPM_NAME="NipaPlay-${VERSION}-Linux-${ARCH}.rpm"
          if [ -n "${GENERATED_RPM_PATH}" ]; then
            mv "${GENERATED_RPM_PATH}" "${LINUX_BUILD_DIR}/${DESIRED_RPM_NAME}"
            echo "RPM package moved and renamed to ${LINUX_BUILD_DIR}/${DESIRED_RPM_NAME}"
          else
            echo "Error: RPM file not found in ${RPM_BUILD_ROOT}/RPMS/${RPM_ARCH_DIR}/"
          fi
          
          # --- Final Check ---
          echo "Checking if all required Linux packages exist..."
          MISSING_FILES=false
          if [ ! -f "${LINUX_BUILD_DIR}/${DEB_PKG_NAME}.deb" ]; then
            echo "Error: .deb file not found! Expected: ${LINUX_BUILD_DIR}/${DEB_PKG_NAME}.deb"
            MISSING_FILES=true
          fi
          if [ ! -f "${LINUX_BUILD_DIR}/${APPIMAGE_NAME}" ]; then
            echo "Error: AppImage file not found! Expected: ${LINUX_BUILD_DIR}/${APPIMAGE_NAME}"
            MISSING_FILES=true
          fi
          if [ ! -f "${LINUX_BUILD_DIR}/${ARCHIVE_NAME}" ]; then
            echo "Error: .tar.gz file not found! Expected: ${LINUX_BUILD_DIR}/${ARCHIVE_NAME}"
            MISSING_FILES=true
          fi
          DESIRED_RPM_NAME_FOR_CHECK="NipaPlay-${VERSION}-Linux-${ARCH}.rpm"
          if [ ! -f "${LINUX_BUILD_DIR}/${DESIRED_RPM_NAME_FOR_CHECK}" ]; then
             echo "Error: RPM file not found! Expected: ${LINUX_BUILD_DIR}/${DESIRED_RPM_NAME_FOR_CHECK}"
             MISSING_FILES=true
          fi

          if [ "$MISSING_FILES" = true ]; then
            echo "One or more package files are missing. Failing the build."
            exit 1
          else
            echo "All required Linux packages found."
          fi

          # --- Cleanup ---
          echo "--- Cleaning up intermediate directories ---"
          rm -rf "${DEB_ROOT}" "${APPDIR}" "${ARCHIVE_CONTENT_DIR}"
          
          echo "--- Linux Packaging Complete ---"
      
      # macOS/iOS CocoaPods依赖清理
      - name: Clean CocoaPods cache and lock for mdk
        if: matrix.target == 'macOS' || matrix.target == 'iOS'
        run: |
          pod cache clean mdk
          find . -name Podfile.lock -delete
          rm -rf macos/Pods ios/Pods
      
      # 可选：清理flutter pub缓存
      - name: Clean flutter pub cache
        run: flutter pub cache clean
      
      # Upload Artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_path }}

  Publish:
    name: Publish
    needs: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Make tmp dir
        run: mkdir /tmp/artifacts
      
      - name: Download all Artifacts
        uses: actions/download-artifact@v4
        with:
          path: /tmp/artifacts
      
      - name: List all Artifacts
        run: ls -R /tmp/artifacts
      
      - name: Get commit message
        id: commit_message
        run: |
          echo "::set-output name=message::$(git log -1 --pretty=%B)"

      - name: Parse commit message
        id: parse_commit
        run: |
          full_message="$(git log -1 --pretty=%B)"
          title="$(echo "$full_message" | head -n1)"
          description="$(echo "$full_message" | tail -n +3)"
          echo "title=$title" >> $GITHUB_OUTPUT
          echo "description<<EOF" >> $GITHUB_OUTPUT
          echo "$description" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload to release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ needs.Build.outputs.version }}
          name: Release v${{ needs.Build.outputs.version }}
          body: |
            ## 版本 v${{ needs.Build.outputs.version }}

            ### ${{ steps.parse_commit.outputs.title }}

            ${{ steps.parse_commit.outputs.description }}

            ### 构建信息
            - 提交: ${{ github.sha }}
            - 分支: ${{ github.ref_name }}
          allowUpdates: true
          # Updated artifacts list to include AppImage, tar.gz and RPM for Linux, plus Windows installers
          # Separate patterns for different artifact types
          artifacts: /tmp/artifacts/release-Android/*.apk,/tmp/artifacts/release-iOS/*.ipa,/tmp/artifacts/release-macOS/*.dmg,/tmp/artifacts/release-Windows-x64/*.zip,/tmp/artifacts/release-Windows-x64/*.exe,/tmp/artifacts/release-Linux-amd64/*.deb,/tmp/artifacts/release-Linux-amd64/*.AppImage,/tmp/artifacts/release-Linux-amd64/*.tar.gz,/tmp/artifacts/release-Linux-amd64/*.rpm
          artifactErrorsFailBuild: true
          replacesArtifacts: true

  # Add new job for version update
  UpdateVersion:
    needs: [Build, Publish]
    if: github.ref == 'refs/heads/main' && success()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: Update version
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Get latest code
          git fetch origin refs/heads/main:refs/remotes/origin/main
          git checkout -B main refs/remotes/origin/main
          
          # Read and update version
          CURRENT_VERSION=$(grep '^version:' pubspec.yaml | cut -d ' ' -f 2)
          echo "Current version: $CURRENT_VERSION"
          
          MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
          PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
          
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          echo "New version: $NEW_VERSION"
          
          # Update pubspec.yaml
          sed -i "s/^version: .*$/version: $NEW_VERSION/" pubspec.yaml
          
          # Commit and push changes
          git add pubspec.yaml
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
          git push origin refs/heads/main
