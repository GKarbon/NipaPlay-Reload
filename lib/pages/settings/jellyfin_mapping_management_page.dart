import 'package:flutter/material.dart';
import 'dart:ui';
import 'package:kmbal_ionicons/kmbal_ionicons.dart';
import 'package:nipaplay/services/jellyfin_episode_mapping_service.dart';
import 'package:nipaplay/widgets/nipaplay_theme/blur_snackbar.dart';
import 'package:nipaplay/widgets/nipaplay_theme/blur_dialog.dart';

class JellyfinMappingManagementPage extends StatefulWidget {
  const JellyfinMappingManagementPage({super.key});

  @override
  State<JellyfinMappingManagementPage> createState() => _JellyfinMappingManagementPageState();
}

class _JellyfinMappingManagementPageState extends State<JellyfinMappingManagementPage> {
  Map<String, dynamic> _stats = {};
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _loadMappingStats();
  }

  Future<void> _loadMappingStats() async {
    try {
      final stats = await JellyfinEpisodeMappingService.instance.getMappingStats();
      if (mounted) {
        setState(() {
          _stats = stats;
          _isLoading = false;
        });
      }
    } catch (e) {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
        BlurSnackBar.show(context, 'Âä†ËΩΩÊò†Â∞ÑÁªüËÆ°Â§±Ë¥•: $e');
      }
    }
  }

  Future<void> _clearAllMappings() async {
    final confirm = await BlurDialog.show<bool>(
      context: context,
      title: 'Ê∏ÖÈô§ÊâÄÊúâÊò†Â∞Ñ',
      content: 'Á°ÆÂÆöË¶ÅÊ∏ÖÈô§ÊâÄÊúâJellyfinÂâßÈõÜÊò†Â∞ÑÂêóÔºüËøôÂ∞ÜÂà†Èô§ÊâÄÊúâÂ∑≤Âª∫Á´ãÁöÑÊô∫ËÉΩÊò†Â∞ÑÂÖ≥Á≥ªÔºåÊó†Ê≥ïÊÅ¢Â§ç„ÄÇ',
      actions: [
        TextButton(
          child: const Text('ÂèñÊ∂à', style: TextStyle(color: Colors.white70)),
          onPressed: () => Navigator.of(context).pop(false),
        ),
        TextButton(
          child: const Text('Á°ÆÂÆöÊ∏ÖÈô§', style: TextStyle(color: Colors.red)),
          onPressed: () => Navigator.of(context).pop(true),
        ),
      ],
    );

    if (confirm == true) {
      try {
        await JellyfinEpisodeMappingService.instance.clearAllMappings();
        BlurSnackBar.show(context, 'ÊâÄÊúâÊò†Â∞ÑÂ∑≤Ê∏ÖÈô§');
        await _loadMappingStats(); // ÈáçÊñ∞Âä†ËΩΩÁªüËÆ°‰ø°ÊÅØ
      } catch (e) {
        BlurSnackBar.show(context, 'Ê∏ÖÈô§Êò†Â∞ÑÂ§±Ë¥•: $e');
      }
    }
  }

  Future<void> _showMappingAnalysis() async {
    if (_stats.isEmpty || _stats['accuracyStats'] == null) {
      BlurSnackBar.show(context, 'ËØ∑ÂÖàÂä†ËΩΩÁªüËÆ°Êï∞ÊçÆ');
      return;
    }

    final List<dynamic> accuracyStats = _stats['accuracyStats'] as List;
    
    if (accuracyStats.isEmpty) {
      BlurDialog.show(
        context: context,
        title: 'Êò†Â∞ÑÂàÜÊûê',
        content: 'ÊöÇÊó†Êò†Â∞ÑÊï∞ÊçÆÂèØ‰æõÂàÜÊûê„ÄÇ\n\nËØ∑ÂÖà‰ΩøÁî®JellyfinÊí≠ÊîæÂô®ËßÇÁúãÂä®ÁîªÂπ∂ÊâãÂä®ÂåπÈÖçÂºπÂπïÔºåÁ≥ªÁªüÂ∞ÜËá™Âä®Âª∫Á´ãÊò†Â∞ÑÂÖ≥Á≥ª„ÄÇ',
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Áü•ÈÅì‰∫Ü', style: TextStyle(color: Colors.white)),
          ),
        ],
      );
      return;
    }

    final StringBuffer content = StringBuffer();
    content.writeln('Êò†Â∞ÑÂáÜÁ°ÆÊÄßÂàÜÊûêÔºö\n');

    for (final stat in accuracyStats.take(10)) { // ÊòæÁ§∫Ââç10‰∏™
      final seriesName = stat['jellyfin_series_name'] as String? ?? 'Êú™Áü•Á≥ªÂàó';
      final totalEpisodes = stat['total_episodes'] as int? ?? 0;
      final confirmedEpisodes = stat['confirmed_episodes'] as int? ?? 0;
      final baseOffset = stat['base_episode_offset'] as int? ?? 0;
      
      final accuracy = totalEpisodes > 0 
          ? (confirmedEpisodes / totalEpisodes * 100).toStringAsFixed(1)
          : '0.0';
      
      content.writeln('üì∫ $seriesName');
      content.writeln('   ÂâßÈõÜÊÄªÊï∞: $totalEpisodes');
      content.writeln('   Â∑≤Á°ÆËÆ§: $confirmedEpisodes');
      content.writeln('   ÂáÜÁ°ÆÁéá: $accuracy%');
      content.writeln('   Âü∫Á°ÄÂÅèÁßª: $baseOffset');
      content.writeln('');
    }

    if (accuracyStats.length > 10) {
      content.writeln('... ËøòÊúâ ${accuracyStats.length - 10} ‰∏™Êò†Â∞Ñ');
    }

    BlurDialog.show(
      context: context,
      title: 'Êò†Â∞ÑÂàÜÊûêÊä•Âëä',
      content: content.toString(),
      actions: [
        TextButton(
          onPressed: () => Navigator.pop(context),
          child: const Text('ÂÖ≥Èó≠', style: TextStyle(color: Colors.white)),
        ),
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    return ListView(
      children: [
        // Êò†Â∞ÑÁªüËÆ°‰ø°ÊÅØ
        _buildStatisticsCard(),
        
        const SizedBox(height: 16),
        
        // ÁÆ°ÁêÜÊìç‰Ωú
        _buildManagementCard(),
        
        const SizedBox(height: 16),
        
        // ËØ¥Êòé‰ø°ÊÅØ
        _buildHelpCard(),
      ],
    );
  }

  Widget _buildStatisticsCard() {
    return ClipRRect(
      borderRadius: BorderRadius.circular(12),
      child: BackdropFilter(
        filter: ImageFilter.blur(sigmaX: 25, sigmaY: 25),
        child: Container(
          margin: const EdgeInsets.symmetric(horizontal: 16),
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: Colors.white.withOpacity(0.1),
            borderRadius: BorderRadius.circular(12),
            border: Border.all(
              color: Colors.white.withOpacity(0.3),
              width: 0.5,
            ),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Row(
                children: [
                  Icon(Ionicons.stats_chart_outline, color: Colors.white, size: 20),
                  SizedBox(width: 8),
                  Text(
                    'Êò†Â∞ÑÁªüËÆ°',
                    style: TextStyle(
                      color: Colors.white,
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 16),
              
              if (_isLoading)
                const Center(
                  child: CircularProgressIndicator(
                    strokeWidth: 2,
                    valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                  ),
                )
              else ...[
                _buildStatItem('Âä®ÁîªÊò†Â∞Ñ', _stats['animeCount'] ?? 0, Icons.tv),
                const SizedBox(height: 8),
                _buildStatItem('ÂâßÈõÜÊò†Â∞Ñ', _stats['episodeCount'] ?? 0, Icons.video_library),
                const SizedBox(height: 8),
                _buildStatItem('Â∑≤Á°ÆËÆ§Êò†Â∞Ñ', _stats['confirmedCount'] ?? 0, Icons.verified),
                const SizedBox(height: 8),
                _buildStatItem('È¢ÑÊµãÊò†Â∞Ñ', _stats['predictedCount'] ?? 0, Icons.auto_awesome),
                
                // ÊòæÁ§∫ÊúÄËøëÊò†Â∞ÑÊ¥ªÂä®
                if (_stats['recentMappings'] != null && (_stats['recentMappings'] as List).isNotEmpty) ...[
                  const SizedBox(height: 16),
                  const Divider(color: Colors.white12),
                  const SizedBox(height: 8),
                  const Text(
                    'ÊúÄËøëÊ¥ªÂä®',
                    style: TextStyle(
                      color: Colors.white,
                      fontSize: 14,
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                  const SizedBox(height: 8),
                  ...(_stats['recentMappings'] as List).take(3).map((mapping) => 
                    Padding(
                      padding: const EdgeInsets.only(bottom: 4),
                      child: Text(
                        '${mapping['jellyfin_series_name']} ‚Üî ${mapping['dandanplay_anime_title']}',
                        style: const TextStyle(
                          color: Colors.white70,
                          fontSize: 12,
                        ),
                        maxLines: 1,
                        overflow: TextOverflow.ellipsis,
                      ),
                    ),
                  ),
                ],
              ],
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildStatItem(String label, int count, IconData icon) {
    return Row(
      children: [
        Icon(icon, color: Colors.white70, size: 16),
        const SizedBox(width: 8),
        Expanded(
          child: Text(
            label,
            style: const TextStyle(color: Colors.white70, fontSize: 14),
          ),
        ),
        Text(
          count.toString(),
          style: const TextStyle(
            color: Colors.white,
            fontSize: 16,
            fontWeight: FontWeight.bold,
          ),
        ),
      ],
    );
  }

  Widget _buildManagementCard() {
    return ClipRRect(
      borderRadius: BorderRadius.circular(12),
      child: BackdropFilter(
        filter: ImageFilter.blur(sigmaX: 25, sigmaY: 25),
        child: Container(
          margin: const EdgeInsets.symmetric(horizontal: 16),
          decoration: BoxDecoration(
            color: Colors.white.withOpacity(0.1),
            borderRadius: BorderRadius.circular(12),
            border: Border.all(
              color: Colors.white.withOpacity(0.3),
              width: 0.5,
            ),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Padding(
                padding: EdgeInsets.all(16),
                child: Row(
                  children: [
                    Icon(Ionicons.settings_outline, color: Colors.white, size: 20),
                    SizedBox(width: 8),
                    Text(
                      'Êò†Â∞ÑÁÆ°ÁêÜ',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ],
                ),
              ),
              
              ListTile(
                leading: const Icon(Ionicons.refresh_outline, color: Colors.white),
                title: const Text(
                  'ÈáçÊñ∞Âä†ËΩΩÁªüËÆ°',
                  style: TextStyle(color: Colors.white, fontWeight: FontWeight.w500),
                ),
                subtitle: const Text(
                  'Âà∑Êñ∞Êò†Â∞ÑÁªüËÆ°‰ø°ÊÅØ',
                  style: TextStyle(color: Colors.white70),
                ),
                onTap: () {
                  setState(() {
                    _isLoading = true;
                  });
                  _loadMappingStats();
                },
              ),
              
              const Divider(color: Colors.white12, height: 1),
              
              ListTile(
                leading: const Icon(Ionicons.analytics_outline, color: Colors.white),
                title: const Text(
                  'Êò†Â∞ÑÂàÜÊûê',
                  style: TextStyle(color: Colors.white, fontWeight: FontWeight.w500),
                ),
                subtitle: const Text(
                  'Êü•ÁúãÊò†Â∞ÑÂáÜÁ°ÆÊÄßÂíå‰ΩøÁî®ÊÉÖÂÜµ',
                  style: TextStyle(color: Colors.white70),
                ),
                onTap: _showMappingAnalysis,
              ),
              
              const Divider(color: Colors.white12, height: 1),
              
              ListTile(
                leading: const Icon(Ionicons.trash_outline, color: Colors.red),
                title: const Text(
                  'Ê∏ÖÈô§ÊâÄÊúâÊò†Â∞Ñ',
                  style: TextStyle(color: Colors.red, fontWeight: FontWeight.w500),
                ),
                subtitle: const Text(
                  'Âà†Èô§ÊâÄÊúâÂ∑≤Âª∫Á´ãÁöÑÊò†Â∞ÑÂÖ≥Á≥ª',
                  style: TextStyle(color: Colors.white70),
                ),
                onTap: _clearAllMappings,
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildHelpCard() {
    return ClipRRect(
      borderRadius: BorderRadius.circular(12),
      child: BackdropFilter(
        filter: ImageFilter.blur(sigmaX: 25, sigmaY: 25),
        child: Container(
          margin: const EdgeInsets.symmetric(horizontal: 16),
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: Colors.white.withOpacity(0.1),
            borderRadius: BorderRadius.circular(12),
            border: Border.all(
              color: Colors.white.withOpacity(0.3),
              width: 0.5,
            ),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Row(
                children: [
                  Icon(Ionicons.help_circle_outline, color: Colors.white, size: 20),
                  SizedBox(width: 8),
                  Text(
                    'ÂÖ≥‰∫éÊô∫ËÉΩÊò†Â∞Ñ',
                    style: TextStyle(
                      color: Colors.white,
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 16),
              
              const Text(
                'Êô∫ËÉΩÊò†Â∞ÑÁ≥ªÁªüËá™Âä®ËÆ∞ÂΩïJellyfinÂâßÈõÜ‰∏éDandanPlayÂºπÂπïÁöÑÂØπÂ∫îÂÖ≥Á≥ªÔºåÂÆûÁé∞‰ª•‰∏ãÂäüËÉΩÔºö',
                style: TextStyle(color: Colors.white, fontSize: 14),
              ),
              const SizedBox(height: 12),
              
              _buildHelpItem('üéØ', 'Ëá™Âä®ÂåπÈÖç', '‰∏∫Êñ∞ÂâßÈõÜËá™Âä®ÂåπÈÖçÂºπÂπïÔºåÊó†ÈúÄÈáçÂ§çÈÄâÊã©'),
              _buildHelpItem('‚è≠Ô∏è', 'ÈõÜÊï∞ÂØºËà™', 'ÊîØÊåÅJellyfinÂâßÈõÜÁöÑ‰∏ä‰∏ÄËØù/‰∏ã‰∏ÄËØùÂØºËà™'),
              _buildHelpItem('üß†', 'Êô∫ËÉΩÈ¢ÑÊµã', 'Âü∫‰∫éÂ∑≤ÊúâÊò†Â∞ÑÈ¢ÑÊµãÊñ∞ÂâßÈõÜÁöÑÂºπÂπïID'),
              _buildHelpItem('üíæ', 'ÊåÅ‰πÖÂåñÂ≠òÂÇ®', 'Êò†Â∞ÑÂÖ≥Á≥ªÊ∞∏‰πÖ‰øùÂ≠òÔºåÈáçÂêØÂ∫îÁî®Âêé‰ªçÁÑ∂ÊúâÊïà'),
              
              const SizedBox(height: 12),
              
              const Text(
                'Êò†Â∞Ñ‰ºöÂú®ÊâãÂä®ÂåπÈÖçÂºπÂπïÊó∂Ëá™Âä®ÂàõÂª∫ÔºåÊó†ÈúÄÊâãÂä®ÈÖçÁΩÆ„ÄÇ',
                style: TextStyle(color: Colors.white70, fontSize: 12),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildHelpItem(String emoji, String title, String description) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(emoji, style: const TextStyle(fontSize: 16)),
          const SizedBox(width: 8),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  title,
                  style: const TextStyle(
                    color: Colors.white,
                    fontSize: 14,
                    fontWeight: FontWeight.w500,
                  ),
                ),
                Text(
                  description,
                  style: const TextStyle(color: Colors.white70, fontSize: 13),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
